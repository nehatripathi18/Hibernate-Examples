package test.hibernate;

import java.util.HashMap;
import java.util.Map;
import org.hibernate.SessionFactory;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Environment;

public class HbUtil {
	private static StandardServiceRegistry registry;
	private static SessionFactory sessionFactory;
	public static SessionFactory getSessionFactory() {
		if (sessionFactory == null) {
			try {
				StandardServiceRegistryBuilder registryBuilder = 
						new StandardServiceRegistryBuilder();
				Map<String, Object> settings = new HashMap<String, Object>(); 	
				settings.put("hibernate.connection.driver_class", "com.mysql.jdbc.Driver");
				settings.put("hibernate.connection.url", "jdbc:mysql://localhost/mt_db?useSSL=false");
				settings.put("hibernate.connection.username", "root");
				settings.put("hibernate.connection.password", "root");
				settings.put("hibernate.show_sql", "true");
				//settings.put("hibernate.hbm2ddl.auto", "update  ");
				//settings.put("hibernate.dialect","org.hibernate.dialect.MySQL5Dialect");
				 settings.put(Environment.HBM2DDL_AUTO, "update");
				//Set JDBC batch size
	            settings.put(Environment.STATEMENT_BATCH_SIZE, 50);
				
				registryBuilder.applySettings(settings);
				registry = registryBuilder.build();

				MetadataSources sources = new MetadataSources(registry);
				
				//sources.addAnno....
				sources.addAnnotatedClass(Employee.class);
				Metadata metadata = sources.getMetadataBuilder().build();
				
				sessionFactory = metadata.getSessionFactoryBuilder().build();
			} catch (Exception e) {
				System.out.println("SessionFactory creation failed");
				if (registry != null) {
					StandardServiceRegistryBuilder.destroy(registry);
				}
			}
		}
		return sessionFactory;
	}

	public static void shutdown() {
		if (registry != null) {
			StandardServiceRegistryBuilder.destroy(registry);
		}
	}
}
